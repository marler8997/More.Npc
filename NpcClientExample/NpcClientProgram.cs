using System;
using System.Net.Sockets;
using System.Net;

using HP.Libraries.Net;

using TestNamespace;

namespace HP.Libraries.Npc
{
    public class NpcClientProgram
    {
        static void Usage()
        {
            Console.WriteLine("Usage: NpcClientProgram.exe <host> <port>");
        }

        static void Main(string[] args)
        {
            if (args.Length != 2)
            {
                Console.WriteLine("Expected 2 arguments but got {0}", args.Length);
                Usage();
                return;
            }

            String ipOrHost = args[0];
            UInt16 port = UInt16.Parse(args[1]);

            EndPoint serverEndPoint = EndPoints.EndPointFromIPOrHost(ipOrHost, port);

            RawControlExample(serverEndPoint);
            UsingAutogeneratedClientExample(serverEndPoint);


        }

        static void RawControlExample(EndPoint serverEndPoint)
        {
            NpcClient npcClient = new NpcClient(serverEndPoint);

            npcClient.UpdateAndVerifyEnumAndObjectTypes();

            /*
            npcClient.VerifyMethodDefinitions(false, new SosMethodDefinition[] {
                new SosMethodDefinition("UsbImpl.GetDevices", "UsbDeviceInformation[]"),
                new SosMethodDefinition("UsbImpl.AddUsbDevice", "Void", "UsbDeviceInformation", "device"),
            });
            */

            //
            // Call Example 1
            //
            UInt32 id = (UInt32)npcClient.Call("testnamespace.device.getid");
            Console.WriteLine("id is {0}", id);

            npcClient.Call("testnamespace.device.setid", 293);
            //
            // Call Example 2 (using namespace client)
            // This means that you can just call the method name instead of providing the whole namespace/class
            //
            NpcClientNamespaceCaller npcNamespaceClient =
                new NpcClientNamespaceCaller(npcClient, "testnamespace.device");

            id = (UInt32)npcNamespaceClient.Call("getid");
            Console.WriteLine("id is {0}", id);

            npcClient.Dispose();


            UsbDeviceInformation deviceInfo = new UsbDeviceInformation(UsbLegacyName.CAT, 24, "Manufacturer\nwith newline");
            npcClient.Call("UsbImpl.AddUsbDevice", deviceInfo);

            deviceInfo.legacyName = UsbLegacyName.KBD;
            deviceInfo.@class = 88;
            deviceInfo.manufacturer = "HP INC";
            npcClient.Call("UsbImpl.AddUsbDevice", deviceInfo);

            UsbDeviceInformation[] deviceInfos = (UsbDeviceInformation[])npcClient.Call("UsbImpl.GetDevices");
        }

        private static void UsingAutogeneratedClientExample(EndPoint serverEndPoint)
        {
            Device device = new Device(serverEndPoint);

            device.UpdateAndVerifyEnumAndObjectTypes();
            device.VerifyMethodDefinitions(true);

            Console.WriteLine("Device.GetID = {0}", device.GetId());
            



        }
    }
}
